<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.postgresql</groupId>
		<artifactId>pljava.app</artifactId>
		<version>1.6.0-SNAPSHOT</version>
	</parent>
	<artifactId>pljava-examples</artifactId>
	<name>PL/Java examples</name>
	<description>Examples of Java stored procedures using PL/Java</description>

	<profiles>
		<profile>
			<id>saxon-examples</id>
			<dependencies>
				<dependency>
					<groupId>net.sf.saxon</groupId>
					<artifactId>Saxon-HE</artifactId>
					<version>[9.9.1-5,9.10)</version>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-compiler-plugin</artifactId>
						<configuration>
							<includes combine.children='append'>
								<include>org/postgresql/pljava/example/saxon/*.java</include>
							</includes>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>nashorngone</id>
			<activation>
				<jdk>[15,)</jdk>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.postgresql</groupId>
						<artifactId>pljava-pgxs</artifactId>
						<dependencies>
							<dependency>
								<groupId>org.graalvm.js</groupId>
								<artifactId>js</artifactId>
								<version>20.1.0</version>
							</dependency>
							<dependency>
								<groupId>org.graalvm.js</groupId>
								<artifactId>js-scriptengine</artifactId>
								<version>20.1.0</version>
							</dependency>
						</dependencies>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<dependencies>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>pljava-api</artifactId>
			<version>${project.version}</version>
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<includes>
						<include>org/postgresql/pljava/example/*.java</include>
						<include>org/postgresql/pljava/example/annotation/*.java</include>
					</includes>
					<compilerArgs>
						<arg>--processor-module-path</arg>
						<arg>${basedir}/../pljava-api/target/pljava-api-${project.version}.jar</arg>
					</compilerArgs>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.2</version>
				<configuration>
					<archive>
						<manifestFile>src/main/resources/META-INF/MANIFEST.MF</manifestFile>
					</archive>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<reporting>
		<plugins>
			<plugin>
				<groupId>org.postgresql</groupId>
				<artifactId>pljava-pgxs</artifactId>
				<version>${pljava.pgxs.version}</version>
				<reportSets>
					<reportSet>
						<reports>
							<report>
								scripting-report
							</report>
						</reports>
						<configuration>
							<script mimetype="application/javascript">
<![CDATA[
function getName(report, locale)
{
	return "JavaDocs";
}

function getDescription(report, locale)
{
	return "JavaDoc API documentation.";
}

function getOutputName(report)
{
	return java.nio.file.Paths.get("apidocs", "index").toString();
}

function isExternalReport(report)
{
	return true;
}

function executeReport(report, locale)
{
	var paths = buildPaths(report.project.compileClasspathElements);

	var title = report.project.name + " " + report.project.version;

	var basedir = report.project.basedir.toPath();

	/*
	 * The toString() here is a sop to a graaljs bug; nashorn doesn't need it.
	 */
	var srcroot = java.nio.file.Paths.get("src", "main", "java").toString();
	srcroot = basedir.resolve(srcroot);
	var srcrooturi = srcroot.toUri();

	var jdklink = "https://docs.oracle.com/" +
		locale.language + "/java/javase/12/docs/api";

	var apioffline =
		basedir.toUri().resolve("../pljava-api/target/site/apidocs");

	var bottom =
		"Copyright &#169; " +
		report.project.inceptionYear + "&#x2013;" + new Date().getFullYear() +
		"<a href='" + report.project.organization.url + "'>" +
		report.project.organization.name + "</a>";

	var of = java.util.List.of;

	var args = of(
		/*
		 * The 'standard options' that javadoc inherits from javac.
		 * Do not add --release: it causes -encoding to be ignored (in javadoc
		 * 12 through 15, anyway).
		 */
		"-encoding",    report.inputEncoding,
		"--class-path", paths.get("classpath"),
		"--module-path",paths.get("modulepath"),
		"-sourcepath",  srcroot.toString(),
		"--add-modules","org.postgresql.pljava",
		/*
		 * Core javadoc options.
		 * Avoid the legacy package/private/protected/public options; they can
		 * clobber the effects of the newer -show-...=... options.
		 */
		"-locale",              locale.toString(),
		"-quiet",
		/*
		 * Options that are passed to the doclet.
		 */
		"-author",
		"-bottom",      bottom,
		"-d",           report.reportOutputDirectory.toPath()
							.resolve("apidocs").toString(),
		"-docencoding", report.outputEncoding,
		"-doctitle",    title,
		"-link",        jdklink,
		"-sourcetab",   "4",
		"-use",
		"-version",
		"-windowtitle", title
	);

	args = new java.util.ArrayList(args);

	/*
	 * Javadoc doesn't learn how to link to modular docs from nonmodular code
	 * until 15.
	 */
	var v = java.lang.Runtime.version();
	if ( 0 <= v.compareTo(java.lang.Runtime.Version.parse("15-ea")) )
		args.addAll(of("-linkoffline",
			"../../pljava-api/apidocs", apioffline.toString()));

	var packages = [
		"org.postgresql.pljava.example",
		"org.postgresql.pljava.example.annotation"
	];

	if ( isProfileActive('saxon-examples') )
		packages.push("org.postgresql.pljava.example.saxon");

	/*
	 * Add the packages to be documented to args. They could perhaps also
	 * be supplied as JavaFileObjects in the compilationUnits parameter,
	 * but they are accepted among the option args, so why work any harder?
	 */
	packages.forEach(function(p) { args.add(p); });

	debug(args.toString());
	var tool = javax.tools.ToolProvider.getSystemDocumentationTool();

	function diagListener(d)
	{
		var s = d.source;

		if ( null === s )
			s = "";
		else
		{
			s = srcrooturi.relativize(s.toUri()).toString();
			s += "[" + d.lineNumber + "," + d.columnNumber + "] ";
		}

		diag(d.kind, s + d.getMessage(locale));
	}

	var smgr = tool.getStandardFileManager(
			diagListener,
			locale,
			java.nio.charset.Charset.forName(report.inputEncoding)
		);

	var rmgr = new org.postgresql.pljava.pgxs.RelativizingFileManager(smgr);
	rmgr.handleOption("-sourcepath",  of(srcroot.toString()).iterator());
	rmgr.handleOption("-classpath",  of(classpath).iterator());

	var task = tool.getTask(null, rmgr, diagListener, null, args, null);
	task.call();
}
]]>
							</script>
						</configuration>
					</reportSet>
				</reportSets>
			</plugin>
		</plugins>
	</reporting>

</project>
