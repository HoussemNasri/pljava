language: java
os:
  - linux
  - osx
dist: bionic
osx_image: xcode11
jdk:
  - openjdk14
  - openjdk13
  - openjdk12
  - openjdk11
  - openjdk10
  - openjdk9
env:
  - POSTGRESQL_VERSION=12
cache:
  directories:
    - $HOME/.m2
before_install:
  - . .travis/travis_install_postgresql.sh
  - . .travis/travis_install_openssl.sh

install: |
  mvn clean install --batch-mode \
   -Dnar.cores=1 -Pwnosign -Psaxon-examples -Ppgjdbc-ng \
   -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn

script: |
  if [[ "$POSTGRESQL_VERSION" == "SOURCE" ]]; then
    pgConfig=/usr/local/pgsql/bin/pg_config
  else
    pgConfig=pg_config
  fi

  packageJar=$(find pljava-packaging -name pljava-pg*.jar -print)

  mavenRepo="$HOME/.m2/repository"

  saxonVer=$(
    find "$mavenRepo/net/sf/saxon/Saxon-HE" -name 'Saxon-HE-*.jar' -print |
    sort |
    tail -n 1
  )
  saxonVer=${saxonVer%/*}
  saxonVer=${saxonVer##*/}

  jdbcJar=$(
    find "$mavenRepo/com/impossibl/pgjdbc-ng/pgjdbc-ng-all" \
      -name 'pgjdbc-ng-all-*.jar' -print |
    sort |
    tail -n 1
  )

  sudo java -Dpgconfig="$pgConfig" -jar "$packageJar"

  jshell \
    -execution local \
    "-J--class-path=$packageJar:$jdbcJar" \
    "--class-path=$packageJar" \
    "-J--add-modules=java.sql,java.sql.rowset" \
    "-J-Dpgconfig=$pgConfig" \
    "-J-Dcom.impossibl.shadow.io.netty.noUnsafe=true" \
    "-J-DmavenRepo=$mavenRepo" \
    "-J-DsaxonVer=$saxonVer" - <<\ENDJSHELL

  import static java.nio.file.Paths.get
  import java.sql.Connection
  import org.postgresql.pljava.packaging.Node
  import static org.postgresql.pljava.packaging.Node.qp

  Path javaLibDir = get(System.getProperty("java.home"), "lib")

  Path libjvm = (
    "Mac OS X".equals(System.getProperty("os.name"))
    ? Stream.of("libjli.dylib", "jli/libjli.dylib")
      .map(s -> javaLibDir.resolve(s)).filter(Files::exists).findFirst().get()
    : javaLibDir.resolve("lib/server/libjvm.so")
  );

  String vmopts = "-enableassertions:org.postgresql.pljava... -Xcheck:jni"

  Node n1 = Node.get_new_node("TestNode1")

  try (
    AutoCloseable t1 = n1.initialized_cluster();
    AutoCloseable t2 = n1.started_server(Map.of(
      "client_min_messages", "info",
      "pljava.vmoptions", vmopts,
      "pljava.libjvm_location", libjvm.toString()
    ));
  )
  {
    try ( Connection c = n1.connect() )
    {
      qp(c, "create extension pljava");
    }

    /*
     * Get a new connection; 'create extension' always sets a near-silent
     * logging level, and PL/Java only checks once at VM start time, so in
     * the same session where 'create extension' was done, logging is
     * somewhat suppressed.
     */
    try ( Connection c = n1.connect() )
    {
      qp(Node.installSaxonAndExamplesAndPath(c,
        System.getProperty("mavenRepo"),
        System.getProperty("saxonVer"),
        true));
    }
  }
  /exit
  ENDJSHELL

jobs:
  include:
    - os: linux
      jdk: openjdk14
      env: POSTGRESQL_VERSION=11
    - os: linux
      jdk: openjdk14
      env: POSTGRESQL_VERSION=10
    - os: linux
      jdk: openjdk14
      env: POSTGRESQL_VERSION=9.5
    - os: osx
      jdk: openjdk14
      env: POSTGRESQL_VERSION=11
    - os: osx
      jdk: openjdk14
      env: POSTGRESQL_VERSION=10
    - os: osx
      jdk: openjdk14
      env: POSTGRESQL_VERSION=9.5
    - os: linux
      jdk: openjdk14
      env: POSTGRESQL_VERSION=SOURCE
