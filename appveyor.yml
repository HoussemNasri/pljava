image: Visual Studio 2019
environment:
  APPVEYOR_RDP_PASSWORD: MrRobot@2020
  VCVARSALL: C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat
  PGUSER: postgres
  PGPASSWORD: Password12!
  matrix:
    - SYS: MINGW
      JDK: 9
      PG: 12
    - SYS: MINGW
      JDK: 10
      PG: 12
    - SYS: MINGW
      JDK: 14
      PG: 12
    - SYS: MINGW
      JDK: 13
      PG: 12
    - SYS: MINGW
      JDK: 12
      PG: 12
    - SYS: MINGW
      JDK: 11
      PG: 12
    - SYS: MSVC
      JDK: 14
      PG: 12
    - SYS: MSVC
      JDK: 13
      PG: 12
    - SYS: MSVC
      JDK: 12
      PG: 12
    - SYS: MSVC
      JDK: 11
      PG: 12
    - SYS: MSVC
      JDK: 10
      PG: 12
    - SYS: MSVC
      JDK: 9
      PG: 12
    - SYS: MSVC
      JDK: 14
      PG: 11
    - SYS: MSVC
      JDK: 14
      PG: 10
    - SYS: MSVC
      JDK: 14
      PG: 9.6
before_build:
  - ps: .appveyor/./appveyor_download_java.ps1
  - set JAVA_HOME=%ProgramFiles%\Java\jdk%JDK%
  - set PGROOT=%ProgramFiles%\PostgreSQL\%PG%
  - path %JAVA_HOME%\bin;%PGROOT%\bin;%PATH%
  - '"%VCVARSALL%" x86'
  - '"%VCVARSALL%" amd64'
  - ps: $Env:JAVA_HOME = "C:\Program Files\Java\jdk$Env:JDK"
  - ps: $Env:PGROOT = "C:\Program Files\PostgreSQL\$Env:PG"
  - ps: $Env:Path = "$Env:JAVA_HOME\bin;$Env:PGROOT\bin;" + $Env:Path
build_script:
  - IF %SYS%==MINGW (
    C:\msys64\usr\bin\env MSYSTEM=MINGW64 C:\msys64\usr\bin\bash -l -c "/c/projects/pljava/.appveyor/appveyor_mingw.sh %JDK%")
    ELSE (
    mvn clean install -Dnar.cores=1 -Psaxon-examples -Ppgjdbc-ng --batch-mode -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
    )
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
before_test:
  - ps: |
      $packageJar = 'pljava-packaging' |
        Get-ChildItem -Recurse -Filter pljava-pg*.jar
      $packageJar = $packageJar.fullName
      java -jar $packageJar 2>&1
test_script:
  - ps: |
      $mavenRepo = "$env:UserProfile\.m2\repository"
      $saxonVer = Join-Path $mavenRepo "net\sf\saxon\Saxon-HE" |
        Get-ChildItem
      $jdbcJar = Join-Path $mavenRepo "com\impossibl\pgjdbc-ng\pgjdbc-ng-all" |
        Get-ChildItem -Recurse -Filter pgjdbc-ng-all-*.jar
      $jdbcJar = $jdbcJar.fullName
      @'
      import static java.nio.file.Paths.get
      import java.sql.Connection
      import org.postgresql.pljava.packaging.Node
      import static org.postgresql.pljava.packaging.Node.qp
      
      String vmopts = "-enableassertions:org.postgresql.pljava... -Xcheck:jni"
      
      Node n1 = Node.get_new_node("TestNode1")
      
      try (
        AutoCloseable t1 = n1.initialized_cluster();
        AutoCloseable t2 = n1.started_server(Map.of(
          "client_min_messages", "info",
          "pljava.vmoptions", vmopts,
          "pljava.libjvm_location",
          get(System.getProperty("java.home"), "bin", "server", "jvm.dll")
            .toString()
        ));
      )
      {
        try ( Connection c = n1.connect() )
        {
          qp(c, "create extension pljava");
        }
        
        /*
         * Get a new connection; 'create extension' always sets a near-silent
         * logging level, and PL/Java only checks once at VM start time, so in
         * the same session where 'create extension' was done, logging is
         * somewhat suppressed.
         */
        try ( Connection c = n1.connect() )
        {
          qp(Node.installSaxonAndExamplesAndPath(c,
            System.getProperty("mavenRepo"),
            System.getProperty("saxonVer"),
            true));
        }
      }
      /exit
      '@ |
      jshell `
        --execution local `
        "-J--class-path=$packageJar;$jdbcJar" `
        "--class-path=$packageJar" `
        "-J--add-modules=java.sql,java.sql.rowset" `
        "-J-Dcom.impossibl.shadow.io.netty.noUnsafe=true" `
        "-J-DmavenRepo=$mavenRepo" `
        "-J-DsaxonVer=$saxonVer"
